-- Table: amr
CREATE TABLE IF NOT EXISTS amr
(
    id               BIGSERIAL PRIMARY KEY,
    name             VARCHAR(255) NOT NULL,
    ip_address       VARCHAR(255) NOT NULL,
    model            VARCHAR(255) NOT NULL,
    serial           VARCHAR(255) NOT NULL UNIQUE,
    firmware_version VARCHAR(255) NOT NULL,
    last_update_date TIMESTAMP    NOT NULL
);

-- Table: amr_status (foreign key to amr.serial)
CREATE TABLE IF NOT EXISTS amr_status
(
    id         BIGSERIAL PRIMARY KEY,
    amr_serial VARCHAR(255)                        NOT NULL,
    state      VARCHAR(255)                        NOT NULL,
    x          DOUBLE PRECISION                    NOT NULL,
    y          DOUBLE PRECISION                    NOT NULL,
    speed      DOUBLE PRECISION                    NOT NULL,
    angle      DOUBLE PRECISION                    NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    FOREIGN KEY (amr_serial) REFERENCES amr (serial) ON DELETE CASCADE
);

-- Index for latest status by AMR
CREATE INDEX idx_amr_status_amr_serial_created_at
    ON amr_status (amr_serial, created_at DESC);


CREATE TABLE IF NOT EXISTS fcm_token
(
    id    BIGSERIAL PRIMARY KEY,
    token VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS notification
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    serial    VARCHAR(255)                            NOT NULL,
    title     VARCHAR(255)                            NOT NULL,
    content   VARCHAR(255)                            NOT NULL,
    _case     VARCHAR(255)                            NOT NULL,
    area      VARCHAR(255)                            NOT NULL,
    image     VARCHAR(255),
    is_read   BOOLEAN                                 NOT NULL,
    read_at   TIMESTAMP,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP     NOT NULL,
    CONSTRAINT pk_notification PRIMARY KEY (id)
);

CREATE TABLE _user
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username VARCHAR(255)                            NOT NULL UNIQUE,
    password VARCHAR(255)                            NOT NULL,
    CONSTRAINT pk_user PRIMARY KEY (id)
);


CREATE TABLE refresh_token
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    BIGINT                                  NOT NULL,
    token      VARCHAR(255),
    expires_at TIMESTAMP                               NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP     NOT NULL,
    CONSTRAINT pk_refresh_token PRIMARY KEY (id),
    FOREIGN KEY (user_id) REFERENCES _user (id) ON DELETE CASCADE
);
