#pragma once
#include <vector>
#include <set>
#include <memory>
#include <string>
#include "i2c_interface.h"

namespace amr {

class I2CAddressManager {
public:
    I2CAddressManager(std::shared_ptr<I2CInterface> i2c);
    ~I2CAddressManager() = default;

    uint8_t findAvailableAddress(const std::string& deviceName = "Device");
    std::vector<uint8_t> findAvailableAddresses(int count);
    
    bool isAddressAvailable(uint8_t address);
    bool testAddress(uint8_t address);
    
    bool reserveAddress(uint8_t address, const std::string& deviceName);
    bool releaseAddress(uint8_t address);
    
    std::set<uint8_t> getReservedAddresses() const;
    std::string getDeviceName(uint8_t address) const;
    
    std::vector<uint8_t> scanBus();
    void printBusStatus();

private:
    std::shared_ptr<I2CInterface> i2c_;
    std::set<uint8_t> reservedAddresses_;
    std::map<uint8_t, std::string> deviceNames_;
    
    std::vector<uint8_t> defaultAddresses_ = {
        0x60,  
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
        0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
        0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
        0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
        0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
        0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
        0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77
    };
};

} 