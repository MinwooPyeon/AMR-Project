#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time
import threading

try:
    import smbus2 as smbus
    SMBUS2_AVAILABLE = True
except ImportError:
    SMBUS2_AVAILABLE = False

class RealMotorController:
    
    def __init__(self, i2c_address: int = 0x40, i2c_bus: int = 0):
        self.i2c_address = i2c_address
        self.i2c_bus = i2c_bus
        
        self.PWMA = 0
        self.AIN1 = 1
        self.AIN2 = 2
        self.PWMB = 5
        self.BIN1 = 3
        self.BIN2 = 4
        
        self.left_speed = 0.0
        self.right_speed = 0.0
        self.left_direction = 'forward'
        self.right_direction = 'forward'
        
        self.motor_lock = threading.Lock()
        
        self.bus = None
        self.is_initialized = False
        
        self._initialize_motor()
    
    def _initialize_motor(self):
        if not SMBUS2_AVAILABLE:
            print("smbus2 Î™®ÎìàÏù¥ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§")
            return
        
        try:
            self.bus = smbus.SMBus(self.i2c_bus)
            
            self._pca9685_init()
            
            self._set_motor_pins(0, 0, 0, 0, 0, 0)
            
            self.is_initialized = True
            print(f"Ïã§Ï†ú Î™®ÌÑ∞ Ïª®Ìä∏Î°§Îü¨ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - Î≤ÑÏä§: {self.i2c_bus}, Ï£ºÏÜå: 0x{self.i2c_address:02X}")
            
        except Exception as e:
            print(f"Î™®ÌÑ∞ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            self.is_initialized = False
    
    def _pca9685_init(self):
        if not self.bus:
            return
        
        try:
            self.bus.write_byte_data(self.i2c_address, 0x00, 0x20)
            time.sleep(0.01)
            
            self.bus.write_byte_data(self.i2c_address, 0x01, 0x04)
            time.sleep(0.01)
            
            prescale = int(25000000 / (4096 * 50) - 1)
            self.bus.write_byte_data(self.i2c_address, 0xFE, prescale)
            time.sleep(0.01)
            
            self.bus.write_byte_data(self.i2c_address, 0x00, 0xA0)
            time.sleep(0.01)
            
            print(f"PCA9685 Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - Ï£ºÌååÏàò: 50Hz")
            
        except Exception as e:
            print(f"PCA9685 Ï¥àÍ∏∞Ìôî Ïò§Î•ò: {e}")
    
    def _set_pwm(self, channel: int, on: int, off: int):
        """PWM Ï±ÑÎÑê ÏÑ§Ï†ï"""
        if not self.bus:
            return
        
        try:
            self.bus.write_byte_data(self.i2c_address, 0x06 + 4 * channel, on & 0xFF)
            self.bus.write_byte_data(self.i2c_address, 0x07 + 4 * channel, (on >> 8) & 0xFF)
            self.bus.write_byte_data(self.i2c_address, 0x08 + 4 * channel, off & 0xFF)
            self.bus.write_byte_data(self.i2c_address, 0x09 + 4 * channel, (off >> 8) & 0xFF)
            
        except Exception as e:
            print(f"PWM ÏÑ§Ï†ï Ïò§Î•ò - Ï±ÑÎÑê {channel}: {e}")
    
    def _set_motor_pins(self, pwma_on, pwma_off, ain1_on, ain1_off, ain2_on, ain2_off):
        """Î™®ÌÑ∞ ÌïÄ ÏÑ§Ï†ï"""
        self._set_pwm(self.PWMA, pwma_on, pwma_off)
        self._set_pwm(self.AIN1, ain1_on, ain1_off)
        self._set_pwm(self.AIN2, ain2_on, ain2_off)
    
    def set_speed(self, left_speed: float, right_speed: float) -> bool:
        """Î™®ÌÑ∞ ÏÜçÎèÑ ÏÑ§Ï†ï"""
        with self.motor_lock:
            if not self.is_initialized:
                self._simulate_set_speed(left_speed, right_speed)
                return True
            
            try:
                # ÏÜçÎèÑ Î≤îÏúÑ Ï†úÌïú (-100 ~ 100)
                left_speed = max(-100, min(100, left_speed))
                right_speed = max(-100, min(100, right_speed))
                
                # ÏôºÏ™Ω Î™®ÌÑ∞ Ï†úÏñ¥
                if left_speed > 0:
                    # Ï†ÑÏßÑ
                    pwm_value = int((left_speed / 100.0) * 4095)
                    self._set_motor_pins(0, pwm_value, 4095, 0, 0, 0)
                elif left_speed < 0:
                    # ÌõÑÏßÑ
                    pwm_value = int((abs(left_speed) / 100.0) * 4095)
                    self._set_motor_pins(0, pwm_value, 0, 0, 4095, 0)
                else:
                    # Ï†ïÏßÄ
                    self._set_motor_pins(0, 0, 0, 0, 0, 0)
                
                # Ïò§Î•∏Ï™Ω Î™®ÌÑ∞ Ï†úÏñ¥
                if right_speed > 0:
                    # Ï†ÑÏßÑ
                    pwm_value = int((right_speed / 100.0) * 4095)
                    self._set_pwm(self.PWMB, 0, pwm_value)
                    self._set_pwm(self.BIN1, 4095, 0)
                    self._set_pwm(self.BIN2, 0, 0)
                elif right_speed < 0:
                    # ÌõÑÏßÑ
                    pwm_value = int((abs(right_speed) / 100.0) * 4095)
                    self._set_pwm(self.PWMB, 0, pwm_value)
                    self._set_pwm(self.BIN1, 0, 0)
                    self._set_pwm(self.BIN2, 4095, 0)
                else:
                    # Ï†ïÏßÄ
                    self._set_pwm(self.PWMB, 0, 0)
                    self._set_pwm(self.BIN1, 0, 0)
                    self._set_pwm(self.BIN2, 0, 0)
                
                self.left_speed = left_speed
                self.right_speed = right_speed
                self.left_direction = 'forward' if left_speed >= 0 else 'backward'
                self.right_direction = 'forward' if right_speed >= 0 else 'backward'
                
                print(f"Î™®ÌÑ∞ ÏÜçÎèÑ ÏÑ§Ï†ï: L={left_speed:.1f}, R={right_speed:.1f}")
                return True
                
            except Exception as e:
                print(f"Î™®ÌÑ∞ ÏÜçÎèÑ ÏÑ§Ï†ï Ïò§Î•ò: {e}")
                return False
    
    def _simulate_set_speed(self, left_speed: float, right_speed: float):
        """ÏãúÎÆ¨Î†àÏù¥ÏÖò Î™®ÎìúÏóêÏÑú ÏÜçÎèÑ ÏÑ§Ï†ï"""
        self.left_speed = left_speed
        self.right_speed = right_speed
        print(f"ÏãúÎÆ¨Î†àÏù¥ÏÖò Î™®ÌÑ∞ ÏÜçÎèÑ ÏÑ§Ï†ï: L={left_speed:.1f}, R={right_speed:.1f}")
    
    def stop(self) -> bool:
        """Î™®ÌÑ∞ Ï†ïÏßÄ"""
        return self.set_speed(0, 0)
    
    def emergency_stop(self) -> bool:
        """ÎπÑÏÉÅ Ï†ïÏßÄ - Î™®Îì† Î™®ÌÑ∞ ÌïÄÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ï"""
        try:
            if self.bus:
                # Î™®Îì† Ï±ÑÎÑêÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ï
                for channel in range(16):
                    self._set_pwm(channel, 0, 0)
                print("üö® ÎπÑÏÉÅ Ï†ïÏßÄ Ïã§Ìñâ")
                return True
        except Exception as e:
            print(f"ÎπÑÏÉÅ Ï†ïÏßÄ Ïò§Î•ò: {e}")
        return False
    
    def test_motor_connection(self) -> bool:
        """Î™®ÌÑ∞ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏"""
        try:
            if not self.bus:
                print("‚ùå I2C Î≤ÑÏä§ Ïó∞Í≤∞ ÏóÜÏùå")
                return False
            
            # PCA9685 ÌÜµÏã† ÌÖåÏä§Ìä∏
            mode1 = self.bus.read_byte_data(self.i2c_address, 0x00)
            print(f"‚úÖ PCA9685 ÌÜµÏã† ÏÑ±Í≥µ (MODE1: 0x{mode1:02X})")
            
            # Í∞ÑÎã®Ìïú PWM ÌÖåÏä§Ìä∏
            self._set_pwm(0, 0, 1000)  # Ï±ÑÎÑê 0Ïóê PWM Ïã†Ìò∏
            time.sleep(0.1)
            self._set_pwm(0, 0, 0)     # Ï†ïÏßÄ
            
            print("‚úÖ Î™®ÌÑ∞ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ")
            return True
            
        except Exception as e:
            print(f"‚ùå Î™®ÌÑ∞ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
            return False
    
    def get_speeds(self) -> dict:
        """ÌòÑÏû¨ ÏÜçÎèÑ Ï°∞Ìöå"""
        return {
            "left_speed": self.left_speed,
            "right_speed": self.right_speed,
            "left_direction": self.left_direction,
            "right_direction": self.right_direction,
            "is_running": (self.left_speed != 0 or self.right_speed != 0),
            "is_initialized": self.is_initialized
        }
    
    def cleanup(self):
        """Ï†ïÎ¶¨"""
        if self.bus:
            try:
                self.stop()
                self.bus.close()
                print("I2C Î≤ÑÏä§ Ïó∞Í≤∞ Ìï¥Ï†ú")
            except Exception as e:
                print(f"I2C Î≤ÑÏä§ Ìï¥Ï†ú Ïò§Î•ò: {e}") 